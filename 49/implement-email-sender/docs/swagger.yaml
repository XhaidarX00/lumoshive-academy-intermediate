basePath: /
definitions:
  helper.HTTPResponse:
    properties:
      data: {}
      error_msg:
        type: string
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  models.Banner:
    properties:
      end_date:
        example: "2024-03-31"
        type: string
      image:
        example: /images/banner1.png
        type: string
      path_page:
        example: /spring-sale
        type: string
      published:
        example: true
        type: boolean
      release_date:
        example: "2024-03-01"
        type: string
      title:
        example: Spring Sale 2024
        type: string
      type:
        example:
        - '["seasonal"'
        - ' "promo"]'
        items:
          type: string
        type: array
    type: object
  models.Category:
    type: object
  models.CheckEmailRequest:
    properties:
      email:
        example: johndoe@example
        type: string
    required:
    - email
    type: object
  models.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.Order:
    properties:
      payment_method:
        example: credit_card
        type: string
      shipping_address:
        example: 123 Main St
        type: string
      status:
        example: pending
        type: string
      total_amount:
        example: 150.75
        type: number
      user_id:
        example: 1
        type: integer
    required:
    - payment_method
    - status
    - total_amount
    - user_id
    type: object
  models.Product:
    properties:
      category_id:
        example: 1
        type: integer
      code_product:
        example: SPH-001
        type: string
      description:
        example: Latest smartphone with advanced features
        type: string
      name:
        example: Smartphone
        minLength: 3
        type: string
      price:
        example: 699.99
        type: number
      published:
        example: true
        type: boolean
      stock:
        example: 50
        type: integer
    required:
    - category_id
    - code_product
    - name
    - price
    - stock
    type: object
  models.ProductWithCategory:
    properties:
      category_name:
        type: string
      code_product:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        type: number
      published:
        type: boolean
      stock:
        type: integer
    type: object
  models.Promotion:
    properties:
      description:
        example: Special holiday discounts
        type: string
      discount:
        example:
        - '[{"value":10'
        - '"type":"percentage"}]'
        items:
          type: string
        type: array
      end_date:
        example: "2024-12-31"
        type: string
      name:
        example: Holiday Sale
        type: string
      product_name:
        example:
        - '["Smartphone"'
        - ' "Laptop"]'
        items:
          type: string
        type: array
      published:
        example: true
        type: boolean
      quota:
        example: 100
        type: integer
      start_date:
        example: "2024-12-01"
        type: string
      status:
        example: true
        type: boolean
      type:
        example:
        - '["discount"'
        - ' "bundle"]'
        items:
          type: string
        type: array
    required:
    - end_date
    - name
    - start_date
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      name:
        example: John Doe
        type: string
      password:
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.StockRequest:
    properties:
      product_id:
        type: integer
      quantity:
        minimum: 1
        type: integer
      type:
        enum:
        - in
        - out
        type: string
    required:
    - product_id
    - quantity
    - type
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      error_msg:
        type: string
      message:
        type: string
    type: object
  utils.PaginationResponse:
    properties:
      data: {}
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  utils.ResponseOK:
    properties:
      data: {}
      message:
        type: string
    type: object
  utils.StockResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      product_name:
        type: string
      product_stock:
        type: integer
      updated_at:
        type: string
      variant: {}
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/support
  description: API for managing Ecommerce
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Dashboard Ecommerce Team 2
  version: "1.0"
paths:
  /api/banner:
    delete:
      consumes:
      - multipart/form-data
      description: Remove a banner by its ID
      parameters:
      - description: Role
        in: header
        name: Authorization
        required: true
        type: string
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted banner
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a banner
      tags:
      - Banner
    get:
      consumes:
      - multipart/form-data
      description: Retrieve a specific banner by its ID
      parameters:
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved banner
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Banner'
              type: object
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to retrieve banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get banner by ID
      tags:
      - Banner
    put:
      consumes:
      - multipart/form-data
      description: Toggle the published status of a banner
      parameters:
      - description: Banner ID
        in: formData
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated published banner
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Banner'
              type: object
        "400":
          description: Invalid banner ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update banner published status
      tags:
      - Banner
  /api/create-banner:
    post:
      consumes:
      - multipart/form-data
      description: Create a new banner with image upload
      parameters:
      - description: Banner Title
        in: formData
        name: title
        required: true
        type: string
      - description: Banner Description
        in: formData
        name: description
        type: string
      - description: Banner Image
        in: formData
        name: image_path
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created banner
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Banner'
              type: object
        "400":
          description: Invalid data input
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to upload image or create banner
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new banner
      tags:
      - Banner
  /api/list-promotion:
    get:
      description: Retrieve a list of all promotions
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved promotions
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Promotion'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all promotions
      tags:
      - Promotions
  /api/promotion:
    get:
      description: Retrieve a specific promotion by its ID
      parameters:
      - description: Promotion ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved promotion
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Promotion'
                  type: array
              type: object
        "400":
          description: Invalid promotion ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get promotion by ID
      tags:
      - Promotions
  /api/promotions:
    delete:
      description: Delete a specific promotion by its ID
      parameters:
      - description: Role
        in: header
        name: Authorization
        required: true
        type: string
      - description: Promotion ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted promotion
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid promotion ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden - Insufficient privileges
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete promotion
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete a promotion
      tags:
      - Promotions
    post:
      consumes:
      - application/json
      description: Create a new promotion with detailed information
      parameters:
      - description: Promotion Details
        in: body
        name: promotion
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/models.SuccessResponse'
          - properties:
              data:
                items:
                  $ref: '#/definitions/models.Promotion'
                type: array
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created promotion
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Promotion'
                  type: array
              type: object
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to create promotion
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a new promotion
      tags:
      - Promotions
  /api/promotions/status:
    put:
      description: Toggle the published status of a specific promotion
      parameters:
      - description: Promotion ID
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated promotion status
          schema:
            allOf:
            - $ref: '#/definitions/models.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Promotion'
                  type: array
              type: object
        "400":
          description: Invalid promotion ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update promotion
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update promotion published status
      tags:
      - Promotions
  /auth/check-email:
    post:
      consumes:
      - application/json
      description: Verify if a user with the given email already exists in the system
      parameters:
      - description: Email to check
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/models.CheckEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email check result
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to check user email
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Check if email is already registered
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Login Request Body
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "401":
          description: Failed to login user
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: User Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with a provided request body
      parameters:
      - description: User Registration Request Body
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Create a new user
      tags:
      - Auth
  /auth/reset-password:
    patch:
      consumes:
      - application/json
      description: Reset the password for a user using a provided request body
      parameters:
      - description: User password reset request body
        in: body
        name: resetRequest
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User password reset successfully
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to reset user password
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Reset user password
      tags:
      - Auth
  /category/:id:
    delete:
      consumes:
      - application/json
      description: Delete a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to delete category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Delete category by ID
      tags:
      - Categories
    get:
      consumes:
      - application/json
      description: Retrieve a category by its ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Invalid category ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update the details of an existing category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated category details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid category ID or input
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to update category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Update a category
      tags:
      - categories
  /category/create:
    post:
      consumes:
      - application/json
      description: Create a new category with a name
      parameters:
      - description: Category name
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created the category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to create category
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Create a new category
      tags:
      - Categories
  /category/list:
    get:
      consumes:
      - application/json
      description: Retrieve all categories with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get all categories
      tags:
      - Categories
  /dashboard/best-item-list:
    get:
      description: Retrieve a list of the best-selling products
      produces:
      - application/json
      responses:
        "200":
          description: best product list successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting best product list
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get best product list
      tags:
      - Dashboard
  /dashboard/current-month-earning:
    get:
      description: Retrieve the earnings for the current month
      produces:
      - application/json
      responses:
        "200":
          description: current month earnings successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting earnings
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get current month earnings
      tags:
      - Dashboard
  /dashboard/revenue-chart:
    get:
      description: Generate a revenue chart for the dashboard
      produces:
      - text/html
      responses:
        "200":
          description: '<!DOCTYPE html><html><head><meta charset=''utf-8''><title>Awesome
            go-echarts</title><script src=''https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js''></script></head><body><div
            class=''container''><div class=''item'' id=''PvBdsRyYJxot'' style=''width:900px;height:500px;''></div></div><script
            type=''text/javascript''>\"use strict\";let goecharts_PvBdsRyYJxot = echarts.init(document.getElementById(''PvBdsRyYJxot''),
            ''white'', { renderer: ''canvas'' });let option_PvBdsRyYJxot = {\"color\":[\"#5470c6\",\"#91cc75\",\"#fac858\",\"#ee6666\",\"#73c0de\",\"#3ba272\",\"#fc8452\",\"#9a60b4\",\"#ea7ccc\"],\"legend\":{},\"series\":[{\"name\":\"Revenue\",\"type\":\"line\",\"smooth\":true,\"data\":[{\"value\":150.75},{\"value\":300},{\"value\":500.5},{\"value\":175.25},{\"value\":250},{\"value\":100.75},{\"value\":400.5},{\"value\":300.25},{\"value\":275},{\"value\":125.5},{\"value\":500},{\"value\":350}]}],\"title\":{\"text\":\"Monthly
            Revenue\"},\"toolbox\":{},\"tooltip\":{},\"xAxis\":[{\"name\":\"Month\",\"data\":[\"January  \",\"February
            \",\"March    \",\"April    \",\"May      \",\"June     \",\"July     \",\"August   \",\"September\",\"October  \",\"November
            \",\"December \"]}],\"yAxis\":[{\"name\":\"Revenue\"}]}goecharts_PvBdsRyYJxot.setOption(option_PvBdsRyYJxot);</script><style>.container
            {margin-top:30px; display: flex;justify-content: center;align-items: center;}.item
            {margin: auto;}</style></body></html>'
          schema:
            type: string
        "500":
          description: Error generating revenue chart
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get revenue chart
      tags:
      - Dashboard
  /dashboard/summary:
    get:
      description: Retrieve a summary of the dashboard
      produces:
      - application/json
      responses:
        "200":
          description: dashboard summary successfully retrieved
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Error getting summary
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get dashboard summary
      tags:
      - Dashboard
  /orders/:
    get:
      consumes:
      - application/json
      description: Get a paginated list of orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get all orders with pagination
      tags:
      - orders
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the order
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to delete the order
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Delete order by ID
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get a single order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
      summary: Get order by ID
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update the status of an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order Status
        example: '"shipped"'
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated the order status
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to update order status
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Update order status
      tags:
      - Orders
  /orders/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get the details of an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
        "500":
          description: Failed to fetch order details
          schema:
            $ref: '#/definitions/helper.HTTPResponse'
      summary: Get order detail by ID
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of products
          schema:
            allOf:
            - $ref: '#/definitions/utils.PaginationResponse'
            - properties:
                Data:
                  items:
                    $ref: '#/definitions/models.ProductWithCategory'
                  type: array
              type: object
        "500":
          description: Failed to fetch products
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Get all products with pagination
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new product with an image
      parameters:
      - description: Category ID
        in: formData
        name: category_id
        required: true
        type: string
      - description: Product Name
        in: formData
        name: name
        required: true
        type: string
      - description: Code Product
        in: formData
        name: code_product
        required: true
        type: string
      - description: Description Product
        in: formData
        name: description
        required: true
        type: string
      - description: Product Price
        in: formData
        name: price
        required: true
        type: number
      - description: Product Stock
        in: formData
        name: stock
        required: true
        type: integer
      - description: Product Image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseOK'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Creates a new product
      tags:
      - Product
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/utils.ResponseOK'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      - UserRole: []
      summary: Delete a product by ID
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get a specific product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product details
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseOK'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Get product by ID
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update an existing product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category ID
        in: formData
        name: category_id
        type: string
      - description: Product Name
        in: formData
        name: name
        type: string
      - description: Code Product
        in: formData
        name: code_product
        type: string
      - description: Description Product
        in: formData
        name: description
        type: string
      - description: Product Price
        in: formData
        name: price
        type: number
      - description: Product Stock
        in: formData
        name: stock
        type: integer
      - description: Product Image
        in: formData
        name: image
        type: file
      - description: Is Published
        in: formData
        name: published
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseOK'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Update a product by ID
      tags:
      - Product
  /stock:
    put:
      consumes:
      - application/json
      description: Update the stock of a product (increase or decrease).
      parameters:
      - description: Stock update request
        in: body
        name: stock_request
        required: true
        schema:
          $ref: '#/definitions/models.StockRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update success
          schema:
            $ref: '#/definitions/utils.ResponseOK'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Update product stock
      tags:
      - Stock
  /stock/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific stock history record by its ID.
      parameters:
      - description: Stock history ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Delete Success
          schema:
            $ref: '#/definitions/utils.ResponseOK'
        "404":
          description: Stock history not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      - UserRole: []
      summary: Delete stock history
      tags:
      - Stock
    get:
      consumes:
      - application/json
      description: Retrieve the stock details of a specific product by stock history
        ID.
      parameters:
      - description: Stock history ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Detail Stock history
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseOK'
            - properties:
                data:
                  $ref: '#/definitions/utils.StockResponse'
              type: object
        "404":
          description: Stock History not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - Authentication: []
      - UserID: []
      summary: Get product stock details
      tags:
      - Stock
securityDefinitions:
  Authentication:
    in: header
    name: Authorization
    type: apiKey
  UserID:
    in: header
    name: User-ID
    type: apiKey
  UserRole:
    in: header
    name: User-Role
    type: apiKey
swagger: "2.0"
