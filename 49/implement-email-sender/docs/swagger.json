{
    "swagger": "2.0",
    "info": {
        "description": "API for managing Ecommerce",
        "title": "Dashboard Ecommerce Team 2",
        "termsOfService": "http://example.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://example.com/support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/banner": {
            "get": {
                "description": "Retrieve a specific banner by its ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Get banner by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Banner ID",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved banner",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Banner"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid banner ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve banner",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Toggle the published status of a banner",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Update banner published status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Banner ID",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated published banner",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Banner"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid banner ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update banner",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Remove a banner by its ID",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Delete a banner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Banner ID",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted banner",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid banner ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete banner",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/create-banner": {
            "post": {
                "description": "Create a new banner with image upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Banner"
                ],
                "summary": "Create a new banner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Banner Title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Banner Description",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Banner Image",
                        "name": "image_path",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created banner",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Banner"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid data input",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to upload image or create banner",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/list-promotion": {
            "get": {
                "description": "Retrieve a list of all promotions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Promotions"
                ],
                "summary": "Get all promotions",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved promotions",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Promotion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/promotion": {
            "get": {
                "description": "Retrieve a specific promotion by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Promotions"
                ],
                "summary": "Get promotion by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved promotion",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Promotion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid promotion ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/promotions": {
            "post": {
                "description": "Create a new promotion with detailed information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Promotions"
                ],
                "summary": "Create a new promotion",
                "parameters": [
                    {
                        "description": "Promotion Details",
                        "name": "promotion",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Promotion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created promotion",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Promotion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create promotion",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a specific promotion by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Promotions"
                ],
                "summary": "Delete a promotion",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted promotion",
                        "schema": {
                            "$ref": "#/definitions/models.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid promotion ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient privileges",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete promotion",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/promotions/status": {
            "put": {
                "description": "Toggle the published status of a specific promotion",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Promotions"
                ],
                "summary": "Update promotion published status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Promotion ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated promotion status",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Promotion"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid promotion ID",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update promotion",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/check-email": {
            "post": {
                "description": "Verify if a user with the given email already exists in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Check if email is already registered",
                "parameters": [
                    {
                        "description": "Email to check",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CheckEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email check result",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to check user email",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate a user and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Request Body",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "401": {
                        "description": "Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with a provided request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User Registration Request Body",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create user",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password": {
            "patch": {
                "description": "Reset the password for a user using a provided request body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Reset user password",
                "parameters": [
                    {
                        "description": "User password reset request body",
                        "name": "resetRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to reset user password",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/category/:id": {
            "get": {
                "description": "Retrieve a category by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category data",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Invalid category ID",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Update a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated category details",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid category ID or input",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a category by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Delete category by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid category ID",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/category/create": {
            "post": {
                "description": "Create a new category with a name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "parameters": [
                    {
                        "description": "Category name",
                        "name": "category",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create category",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/category/list": {
            "get": {
                "description": "Retrieve all categories with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Get all categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/dashboard/best-item-list": {
            "get": {
                "description": "Retrieve a list of the best-selling products",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get best product list",
                "responses": {
                    "200": {
                        "description": "best product list successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting best product list",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/dashboard/current-month-earning": {
            "get": {
                "description": "Retrieve the earnings for the current month",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get current month earnings",
                "responses": {
                    "200": {
                        "description": "current month earnings successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting earnings",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/dashboard/revenue-chart": {
            "get": {
                "description": "Generate a revenue chart for the dashboard",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get revenue chart",
                "responses": {
                    "200": {
                        "description": "\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\u003cmeta charset='utf-8'\u003e\u003ctitle\u003eAwesome go-echarts\u003c/title\u003e\u003cscript src='https://go-echarts.github.io/go-echarts-assets/assets/echarts.min.js'\u003e\u003c/script\u003e\u003c/head\u003e\u003cbody\u003e\u003cdiv class='container'\u003e\u003cdiv class='item' id='PvBdsRyYJxot' style='width:900px;height:500px;'\u003e\u003c/div\u003e\u003c/div\u003e\u003cscript type='text/javascript'\u003e\\\"use strict\\\";let goecharts_PvBdsRyYJxot = echarts.init(document.getElementById('PvBdsRyYJxot'), 'white', { renderer: 'canvas' });let option_PvBdsRyYJxot = {\\\"color\\\":[\\\"#5470c6\\\",\\\"#91cc75\\\",\\\"#fac858\\\",\\\"#ee6666\\\",\\\"#73c0de\\\",\\\"#3ba272\\\",\\\"#fc8452\\\",\\\"#9a60b4\\\",\\\"#ea7ccc\\\"],\\\"legend\\\":{},\\\"series\\\":[{\\\"name\\\":\\\"Revenue\\\",\\\"type\\\":\\\"line\\\",\\\"smooth\\\":true,\\\"data\\\":[{\\\"value\\\":150.75},{\\\"value\\\":300},{\\\"value\\\":500.5},{\\\"value\\\":175.25},{\\\"value\\\":250},{\\\"value\\\":100.75},{\\\"value\\\":400.5},{\\\"value\\\":300.25},{\\\"value\\\":275},{\\\"value\\\":125.5},{\\\"value\\\":500},{\\\"value\\\":350}]}],\\\"title\\\":{\\\"text\\\":\\\"Monthly Revenue\\\"},\\\"toolbox\\\":{},\\\"tooltip\\\":{},\\\"xAxis\\\":[{\\\"name\\\":\\\"Month\\\",\\\"data\\\":[\\\"January  \\\",\\\"February \\\",\\\"March    \\\",\\\"April    \\\",\\\"May      \\\",\\\"June     \\\",\\\"July     \\\",\\\"August   \\\",\\\"September\\\",\\\"October  \\\",\\\"November \\\",\\\"December \\\"]}],\\\"yAxis\\\":[{\\\"name\\\":\\\"Revenue\\\"}]}goecharts_PvBdsRyYJxot.setOption(option_PvBdsRyYJxot);\u003c/script\u003e\u003cstyle\u003e.container {margin-top:30px; display: flex;justify-content: center;align-items: center;}.item {margin: auto;}\u003c/style\u003e\u003c/body\u003e\u003c/html\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error generating revenue chart",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/dashboard/summary": {
            "get": {
                "description": "Retrieve a summary of the dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get dashboard summary",
                "responses": {
                    "200": {
                        "description": "dashboard summary successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Error getting summary",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/orders/": {
            "get": {
                "description": "Get a paginated list of orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get all orders with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/orders/detail/{id}": {
            "get": {
                "description": "Get the details of an order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order detail by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch order details",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "description": "Get a single order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Order"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the status of an order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "example": "\"shipped\"",
                        "description": "Order Status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the order status",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update order status",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the order",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete the order",
                        "schema": {
                            "$ref": "#/definitions/helper.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Get a paginated list of all products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get all products with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.PaginationResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.ProductWithCategory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to fetch products",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Create a new product with an image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Creates a new product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Code Product",
                        "name": "code_product",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description Product",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Product Price",
                        "name": "price",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Product Stock",
                        "name": "stock",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Product Image",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseOK"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Get a specific product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product details",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseOK"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Update an existing product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update a product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Code Product",
                        "name": "code_product",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Description Product",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": "Product Price",
                        "name": "price",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Product Stock",
                        "name": "stock",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Product Image",
                        "name": "image",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Is Published",
                        "name": "published",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseOK"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Product"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    },
                    {
                        "UserRole": []
                    }
                ],
                "description": "Delete a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a product by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseOK"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stock": {
            "put": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Update the stock of a product (increase or decrease).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stock"
                ],
                "summary": "Update product stock",
                "parameters": [
                    {
                        "description": "Stock update request",
                        "name": "stock_request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StockRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update success",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseOK"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/stock/{id}": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    }
                ],
                "description": "Retrieve the stock details of a specific product by stock history ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stock"
                ],
                "summary": "Get product stock details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stock history ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail Stock history",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.ResponseOK"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/utils.StockResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Stock History not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Authentication": []
                    },
                    {
                        "UserID": []
                    },
                    {
                        "UserRole": []
                    }
                ],
                "description": "Delete a specific stock history record by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stock"
                ],
                "summary": "Delete stock history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Stock history ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delete Success",
                        "schema": {
                            "$ref": "#/definitions/utils.ResponseOK"
                        }
                    },
                    "404": {
                        "description": "Stock history not found",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "helper.HTTPResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error_msg": {
                    "type": "string"
                },
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "total_items": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "models.Banner": {
            "type": "object",
            "properties": {
                "end_date": {
                    "type": "string",
                    "example": "2024-03-31"
                },
                "image": {
                    "type": "string",
                    "example": "/images/banner1.png"
                },
                "path_page": {
                    "type": "string",
                    "example": "/spring-sale"
                },
                "published": {
                    "type": "boolean",
                    "example": true
                },
                "release_date": {
                    "type": "string",
                    "example": "2024-03-01"
                },
                "title": {
                    "type": "string",
                    "example": "Spring Sale 2024"
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"seasonal\"",
                        " \"promo\"]"
                    ]
                }
            }
        },
        "models.Category": {
            "type": "object"
        },
        "models.CheckEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "required": [
                "payment_method",
                "status",
                "total_amount",
                "user_id"
            ],
            "properties": {
                "payment_method": {
                    "type": "string",
                    "example": "credit_card"
                },
                "shipping_address": {
                    "type": "string",
                    "example": "123 Main St"
                },
                "status": {
                    "type": "string",
                    "example": "pending"
                },
                "total_amount": {
                    "type": "number",
                    "example": 150.75
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "models.Product": {
            "type": "object",
            "required": [
                "category_id",
                "code_product",
                "name",
                "price",
                "stock"
            ],
            "properties": {
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "code_product": {
                    "type": "string",
                    "example": "SPH-001"
                },
                "description": {
                    "type": "string",
                    "example": "Latest smartphone with advanced features"
                },
                "name": {
                    "type": "string",
                    "minLength": 3,
                    "example": "Smartphone"
                },
                "price": {
                    "type": "number",
                    "example": 699.99
                },
                "published": {
                    "type": "boolean",
                    "example": true
                },
                "stock": {
                    "type": "integer",
                    "example": 50
                }
            }
        },
        "models.ProductWithCategory": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "code_product": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "published": {
                    "type": "boolean"
                },
                "stock": {
                    "type": "integer"
                }
            }
        },
        "models.Promotion": {
            "type": "object",
            "required": [
                "end_date",
                "name",
                "start_date"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Special holiday discounts"
                },
                "discount": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[{\"value\":10",
                        "\"type\":\"percentage\"}]"
                    ]
                },
                "end_date": {
                    "type": "string",
                    "example": "2024-12-31"
                },
                "name": {
                    "type": "string",
                    "example": "Holiday Sale"
                },
                "product_name": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"Smartphone\"",
                        " \"Laptop\"]"
                    ]
                },
                "published": {
                    "type": "boolean",
                    "example": true
                },
                "quota": {
                    "type": "integer",
                    "example": 100
                },
                "start_date": {
                    "type": "string",
                    "example": "2024-12-01"
                },
                "status": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"discount\"",
                        " \"bundle\"]"
                    ]
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "johndoe@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "models.StockRequest": {
            "type": "object",
            "required": [
                "product_id",
                "quantity",
                "type"
            ],
            "properties": {
                "product_id": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "in",
                        "out"
                    ]
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "utils.ErrorResponse": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.PaginationResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "limit": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "page": {
                    "type": "integer"
                },
                "total_items": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "utils.ResponseOK": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "utils.StockResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "product_id": {
                    "type": "integer"
                },
                "product_name": {
                    "type": "string"
                },
                "product_stock": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "variant": {}
            }
        }
    },
    "securityDefinitions": {
        "Authentication": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "UserID": {
            "type": "apiKey",
            "name": "User-ID",
            "in": "header"
        },
        "UserRole": {
            "type": "apiKey",
            "name": "User-Role",
            "in": "header"
        }
    }
}